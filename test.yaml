proxy:
 service:
   type: ClusterIP

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 200M
  hosts:
    - localhost
  pathType: Prefix 

hub:
  baseUrl: /cs1302_23a
  nodeSelector:
    kubernetes.io/hostname: dive
  image:
    name: localhost:32000/cs1302hub
    tag: 0.1.0c
  config:
    Authenticator:
      admin_users:
        - ccha23
        - ruoqitang2
    JupyterHub:
      admin_access: true
  extraConfig:
    01-radius-auth: |
      import subprocess
      from shlex import quote
      from jupyterhub.auth import PAMAuthenticator, DummyAuthenticator

      class MyAuthenticator(DummyAuthenticator):

        # def system_user_exists(self, user):
        #   cmd = 'getent passwd {}'.format(quote(user.name))
        #   try:
        #     subprocess.check_output(cmd, shell=True).decode("utf-8").strip()
        #   except subprocess.CalledProcessError as e:
        #     return False
        #   else:
        #     return True

        # def pre_spawn_start(self, user, spawner):
        #   uid = subprocess.check_output(["id", "-u", user.name]).decode("utf-8").strip()
        #   gid = subprocess.check_output(["id", "-g", user.name]).decode("utf-8").strip()
        #   cmd = 'getent passwd {} | cut -d: -f6'.format(quote(user.name))
        #   userdir = subprocess.check_output(cmd, shell=True).decode("utf-8").strip()

        #   cmd = 'sudo mkhomedir_helper {}'.format(quote(user.name))
        #   try:
        #     subprocess.check_output(cmd, shell=True)
        #   except subprocess.CalledProcessError as e:
        #     pass

        #   cmd = 'chown -hR {}:{} {}'.format(uid, gid, userdir)
        #   try:
        #     subprocess.check_output(cmd, shell=True)
        #   except subprocess.CalledProcessError as e:
        #     pass

        #   spawner.environment['NB_UID'] = str(int(uid))
        #   spawner.environment['NB_GID'] = str(int(gid))
        #   spawner.environment['NB_USER'] = user.name

        #   spawner.volumes = [
        #     {
        #       'name': 'exchange',
        #       'hostPath': {
        #         'path': '/home/courses/cs1302',
        #         'type': 'Directory'
        #       }
        #     }
        #   ])
        #   spawner.volume_mounts.extend([
        #     {
        #       'mountPath': '/home/exchange',
        #       'name': 'exchange'
        #     }
        #   ])

        #   super().pre_spawn_start(user, spawner)

        pass

      c.JupyterHub.authenticator_class = MyAuthenticator
    02-collab-group : |
      c.JupyterHub.load_groups = {
          # collaborative accounts get added to this group
          # so it's easy to see which accounts are collaboration accounts
          "collaborative": [
            "grader-cs1302"
          ],
          "formgrade-cs1302": [
            "_ta1",
            "_ta2",
          ]
      }

      c.JupyterHub.load_roles = [
        {
            "name": f"access-grader-cs1302",
            "scopes": [
                f"access:servers!user=grader-cs1302",
                f"admin:servers!user=grader-cs1302",
                "admin-ui",
                f"list:users!user=grader-cs1302",
            ],
            "groups": ["formgrade-cs1302"],
        },
      ]

      def pre_spawn_hook(spawner):
        group_names = {group.name for group in spawner.user.groups}
        if "collaborative" in group_names:
          spawner.log.info(f"Enabling RTC for user {spawner.user.name}")
          spawner.uid = 2000
          spawner.gid = 100

      c.Spawner.pre_spawn_hook = pre_spawn_hook

singleuser:
  # uid: 0
  cmd: start-singleuser.sh
  image: 
    name: jupyter/minimal-notebook
    tag: latest
  storage:
    capacity: 10Gi
    homeMountPath: /home/jovyan
    dynamic:
      pvcNameTemplate: claim-{username}
      storageClass: home-dive0-nfs
    extraVolumes:
      - name: exchange
        persistentVolumeClaim:
          claimName: exchange-cs1302
    extraVolumeMounts:
      - mountPath: "/opt/conda/srv/exchange"
        name: exchange
  # extraEnv:
  #   CHOWN_HOME: "yes"
  memory:
    limit: 4G
    guarantee: 2G
  cpu:
    limit: 4
    guarantee: 0.1
  networkPolicy:
    egressAllowRules:
      privateIPs: true
  extraPodConfig:
    hostIPC: true
  profileList:
    - default: true
      display_name: Default
      description: |
        Default jupyter server run on Ubuntu.
      kubespawner_override:
        image: localhost:32000/cs1302nb:0.1.0c
    - display_name: Alpine
      description: |
        Lightweight jupyter server run on Alpine Linux. It may run faster but has less features.
      kubespawner_override:
        image: localhost:32000/cs1302anb:0.1.0c
    - display_name: nbg
      description: |
        For running notebooks with GPU.   
      kubespawner_override:
        image: localhost:32000/nbg:0.1.1c
        extra_resource_limits:
          nvidia.com/gpu-3gb: "1" 
