proxy:
 service:
   type: ClusterIP

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 200M
  hosts:
    - dive.cs.cityu.edu.hk
  pathType: Prefix 

hub:
  baseUrl: /cs1302_23a
  nodeSelector:
    kubernetes.io/hostname: dive
  image:
    name: localhost:32000/cs1302hub
    tag: 0.1.0d
  config:
    Authenticator:
      admin_users:
        - ccha23
        - ruoqitang2
    JupyterHub:
      admin_access: true
  extraConfig:
    01-radius-auth: |
      import subprocess
      from shlex import quote
      from jupyterhub.auth import PAMAuthenticator

      class MyAuthenticator(PAMAuthenticator):

        def system_user_exists(self, user):
          cmd = 'getent passwd {}'.format(quote(user.name))
          try:
            subprocess.check_output(cmd, shell=True).decode("utf-8").strip()
          except subprocess.CalledProcessError as e:
            return False
          else:
            return True


      c.JupyterHub.authenticator_class = MyAuthenticator
    02-collab-group : |
      c.JupyterHub.load_groups = {
          # collaborative accounts get added to this group
          # so it's easy to see which accounts are collaboration accounts
          "collaborative": [
            "grader-cs1302"
          ],
          "formgrade-cs1302": []
      }

      c.JupyterHub.load_roles = [
        {
            "name": f"access-grader-cs1302",
            "scopes": [
                f"access:servers!user=grader-cs1302",
                f"admin:servers!user=grader-cs1302",
                "admin-ui",
                f"list:users!user=grader-cs1302",
            ],
            "groups": ["formgrade-cs1302"],
        },
      ]

      def pre_spawn_hook(spawner):
        group_names = {group.name for group in spawner.user.groups}
        if "collaborative" in group_names:
          spawner.log.info(f"Enabling RTC for user {spawner.user.name}")
          spawner.uid = 2000
          spawner.gid = 100

        exchange = {
          'name': 'volume-grader-2dcs1302',
          'persistentVolumeClaim': {
            'claimName': 'claim-grader-2dcs1302'
          },
          'mountPath': '/opt/conda/srv/exchange',
          'subPath': 'exchange'
        }

        if spawner.user.name != "grader-cs1302":
          spawner.volumes.extend([
            {
              'name': exchange['name'],
              'persistentVolumeClaim': exchange['persistentVolumeClaim']
            }         
          ])
        
        spawner.volume_mounts.extend([
          {
            'name': exchange['name'],
            'mountPath': exchange['mountPath'],
            'subPath': exchange['subPath']
          }        
        ])

      c.Spawner.pre_spawn_hook = pre_spawn_hook

singleuser:
  cmd: start-singleuser.sh
  image: 
    name: jupyter/minimal-notebook
    tag: latest
  storage:
    capacity: 10Gi
    homeMountPath: /home/jovyan
    dynamic:
      pvcNameTemplate: claim-{username}
      volumeNameTemplate: volume-{username}      
      storageClass: home-dive0-nfs
  memory:
    limit: 4G
    guarantee: 2G
  cpu:
    limit: 4
    guarantee: 0.1
  networkPolicy:
    egressAllowRules:
      privateIPs: true
  profileList:
    - default: true
      display_name: Default
      description: |
        Default jupyter server run on Ubuntu.
      kubespawner_override:
        image: localhost:32000/cs1302nb:0.1.0d
    - display_name: Alpine
      description: |
        Lightweight jupyter server run on Alpine Linux. It may run faster but has less features.
      kubespawner_override:
        image: localhost:32000/cs1302anb:0.1.0d

